\name{KRMM-package}
\alias{KRMM-package}
\docType{package}
\encoding{utf8}

\title{Kernel Ridge Mixed Model}

\description{
Solves kernel ridge regression, within the the mixed model framework, for the linear, polynomial, Gaussian, Laplacian and ANOVA kernels.
The model components (i.e. fixed and random effects) and variance parameters are estimated using the expectation-maximization (EM) algorithm.
All the estimated components and parameters, e.g. BLUP of dual variables and BLUP of random predictor effects for the linear kernel (also known as RR-BLUP), are available.
The kernel ridge mixed model (KRMM) is described in Jacquin L, Cao T-V and Ahmadi N (2016) A Unified and Comprehensible View of Parametric and Kernel Methods for Genomic Prediction with Application to Rice. Front. Genet. 7:145.}

\details{
This package solves kernel ridge regression for various kernels within the following mixed model framework: $Y =X\beta + Z.U + \varepsilon$, where X and Z correspond to the design matrices of predictors with fixed and random effects respectively.
The functions provided with this package are krmm, predict_krmm, tune_krmm and em_reml_mm.
}

\author{
 Laval Jacquin
 Maintainer: Laval Jacquin <jacquin.julien@gmail.com>
 }

\references{

Jacquin et al. (2016). A unified and comprehensible view of parametric and kernel methods for genomic prediction with application to rice (in peer review).

Robinson, G. K. (1991). That blup is a good thing: the estimation of random effects. Statistical science, 534 15-32

Foulley, J.-L. (2002). Algorithme em: théorie et application au modèle mixte. Journal de la Société française de Statistique 143, 57-109

}

%~~ Optionally other standard keywords, one per line, from file KEYWORDS in ~~
%~~ the R documentation directory ~~
\keyword{ package }

%\seealso{
%~~ Optional links to other man pages, e.g. ~~
%~~ \code{\link[<pkg>:<pkg>-package]{<pkg>}} ~~
%}

\examples{

# load libraries
library(KRMM)
library(MASS)
library(kernlab)
library(cvTools)

# simulate data
set.seed(123)
p <- 100
n <- 200
beta <- rnorm(p, mean = 0, sd = 1.0) # random effects
X <- matrix(runif(p * n, min = 0, max = 1), ncol = p, byrow = T) # matrix of covariates
f <- tcrossprod(beta, X) # data generating process
eps <- rnorm(n, mean = 0, sd = 0.9) # add residuals
Y <- f + eps

# split data into training and test set
n_train <- floor(n * 0.67)
idx_train <- sample(1:n, size = n_train, replace = F)

# train
x_train <- X[idx_train, ]
y_train <- Y[idx_train]
length(y_train)

# test
x_test <- X[-idx_train, ]
y_test <- Y[-idx_train]
f_test <- f[-idx_train] # true value generated by DGP we want to predict
length(y_test)

# train and predict with krmm linear kernel
linear_krmm_model <- krmm(
  Y = y_train, Matrix_covariates = x_train,
  method = "RR-BLUP"
)

# without fixed effects
f_hat_test <- predict_krmm(linear_krmm_model,
  Matrix_covariates = x_test
)

dev.new()
plot(f_hat_test, f_test,
  main = "Linear RKHS regression with default rate of decay (not optimized)"
)
cor(f_hat_test, f_test)

# add fixed effects
f_hat_test <- predict_krmm(linear_krmm_model,
  Matrix_covariates = x_test, add_flxed_effects = T
)

dev.new()
plot(f_hat_test, f_test,
  main = "Linear RKHS regression with default rate of decay (not optimized)"
)
cor(f_hat_test, f_test)

# train and predict with krmm gaussian kernel (default kernel for RKHS method)
non_linear_krmm_model <- krmm(
  Y = y_train, Matrix_covariates = x_train,
  method = "RKHS"
)

# without fixed effects
f_hat_test <- predict_krmm(non_linear_krmm_model,
  Matrix_covariates = x_test
)

dev.new()
plot(f_hat_test, f_test,
  main = "Gaussian RKHS regression with default rate of decay (not optimized)"
)
cor(f_hat_test, f_test)

# add fixed effects
f_hat_test <- predict_krmm(non_linear_krmm_model,
  Matrix_covariates = x_test, add_flxed_effects = T
)

dev.new()
plot(f_hat_test, f_test,
  main = "Gaussian RKHS regression with default rate of decay (not optimized)"
)
cor(f_hat_test, f_test)

\dontrun{

# tune krmm model with a gaussian kernel
non_linear_opt_krmm_obj <- tune_krmm(
  Y = y_train, Matrix_covariates = x_train,
  rate_decay_grid = seq(0.01, 0.1, length.out = 5), nb_folds = 3,
  method = "RKHS"
)
non_linear_opt_krmm_obj$optimal_h

plot(non_linear_opt_krmm_obj$rate_decay_grid,
  non_linear_opt_krmm_obj$mean_loss_grid,
  type = "l"
)

non_linear_opt_krmm_model <- non_linear_opt_krmm_obj$optimized_model

# add fixed effects
f_hat_test <- predict_krmm(non_linear_opt_krmm_model,
  Matrix_covariates = x_test, add_flxed_effects = T
)
dev.new()
plot(f_hat_test, f_test,
  main = "Gaussian RKHS regression with optimized rate of decay"
)
cor(f_hat_test, f_test)

}

}
